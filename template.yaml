# -----------------------------------------------------------------------------
# This is an AWS Serverless Application Model (SAM) template
# It defines the "stack" of AWS resources needed to run the SAM app
# -----------------------------------------------------------------------------
AWSTemplateFormatVersion: "2010-09-09"

# -----------------------------------------------------------------------------
# This file is written in SAM syntax, and gets transfomed and expanded into a
# CloudFormation template.  The CloudFormation template is what actually gets
# deployed.  The main point is that SAM syntax is much simpler, with a lot less
# boilerplate around declaring resources like Lambda functions and their
# accompanying execution roles.
# -----------------------------------------------------------------------------
Transform: AWS::Serverless-2016-10-31

# -----------------------------------------------------------------------------
# This particular template defines the back end of the Tacocat photo gallery
# -----------------------------------------------------------------------------
Description: Tacocat Gallery image storage, database, and API

# -----------------------------------------------------------------------------
# Parameters that can be specified when deploying this stack
# This is the only way to define constants for use elsewhere in the template
# -----------------------------------------------------------------------------
Parameters:
  Env:
    Description: Environment for which the infrastructure will be deployed
    Type: String
    AllowedValues:
      - dev
      - test
      - prod
    ConstraintDescription: Must be either 'dev', 'test' or 'prod'
  GalleryAppDomain:
    Description: Domain of the Tacocat photo gallery web app 
    Type: String
    AllowedValues:
      - staging-pix.tacocat.com
      - test-pix.tacocat.com
      - pix.tacocat.com
    ConstraintDescription: Must be either 'staging-pix.tacocat.com', 'test-pix.tacocat.com' or 'pix.tacocat.com'
  DomainCertificateArn:
    Description: ARN of the ACM certificate for the GalleryAppDomain domain
    Type: String
    AllowedValues:
      - arn:aws:acm:us-east-1:010410881828:certificate/092ab57c-f87d-4c44-a72c-63cfbbb55800 # staging-pix.tacocat.com
      - arn:aws:acm:us-east-1:010410881828:certificate/9fbd8ee9-f1d1-42a5-b97c-9713ce6e076d # test-pix.tacocat.com
      - arn:aws:acm:us-east-1:010410881828:certificate/e142cda0-96db-4651-92fd-35dd9a52e9a2 # pix.tacocat.com

# -----------------------------------------------------------------------------
# Conditions are boolean conditions that can be used to control resources
# -----------------------------------------------------------------------------
Conditions:
  IsProd: !Equals [ !Ref Env, "prod" ]

# -----------------------------------------------------------------------------
# Configuration properties inherited by all resources, such as Lambda functions
# -----------------------------------------------------------------------------
Globals:
  Function:
    Runtime: nodejs20.x
    MemorySize: 256
    Timeout: 100 # TODO decrease this; the default is 3!
    LoggingConfig:
      LogFormat: JSON
    Environment:
        Variables:
          GALLERY_APP_DOMAIN: !Ref GalleryAppDomain
  Api:
    Name: !Sub Tacocat Gallery API - ${Env}
    Domain:
      DomainName: !Sub api.${GalleryAppDomain}
      CertificateArn: !Ref DomainCertificateArn
    Cors:
      AllowMethods: "'GET,OPTIONS,HEAD,POST,PUT,PATCH,DELETE'"
      AllowHeaders: "'Content-Type'"
      AllowOrigin: !Sub "'https://${GalleryAppDomain}'"
      AllowCredentials: true

# -----------------------------------------------------------------------------
# Resources are the actual AWS assets to be provisioned
# -----------------------------------------------------------------------------
Resources:
  # -----------------------------------------------------------------------------
  # S3 bucket for original images
  # -----------------------------------------------------------------------------
  OriginalImagesBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: !If [ "IsProd", "Retain", "Delete" ] # don't delete in prod
    UpdateReplacePolicy: !If [ "IsProd", "Retain", "Delete" ] # don't delete in prod
    Properties:
      BucketName: !Sub ${AWS::StackName}-original-images
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: Delete Old Versions
            NoncurrentVersionExpirationInDays: 24 # delete old versions after 24 days
            ExpiredObjectDeleteMarker: true
            Status: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - PUT # used by presigned URLs to upload images
            AllowedOrigins:
#              - "*"
              - !Sub "https://${GalleryAppDomain}"
            ExposedHeaders:
              - ETag
              - x-amz-version-id # Necessary so that client can receive version ID of uploaded image

  # -----------------------------------------------------------------------------
  # S3 bucket for derived images
  # -----------------------------------------------------------------------------
  DerivedImagesBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: !If [ "IsProd", "Retain", "Delete" ] # don't delete in prod
    UpdateReplacePolicy: !If [ "IsProd", "Retain", "Delete" ] # don't delete in prod
    Properties:
      BucketName: !Sub ${AWS::StackName}-derived-images

  # -----------------------------------------------------------------------------
  # DynamoDB table containing the album and image metadata
  # -----------------------------------------------------------------------------
  GalleryItemDDBTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: !If [ "IsProd", "Retain", "Delete" ] # don't delete in prod
    UpdateReplacePolicy: !If [ "IsProd", "Retain", "Delete" ] # don't delete in prod
    Properties:
      TableName: !Sub ${AWS::StackName}-items
      AttributeDefinitions:
        - AttributeName: parentPath
          AttributeType: S
        - AttributeName: itemName
          AttributeType: S
      KeySchema:
        - AttributeName: parentPath
          KeyType: HASH
        - AttributeName: itemName
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 3
        WriteCapacityUnits: 3

  # -----------------------------------------------------------------------------
  # CloudFront CDN distribution that serves the images
  # -----------------------------------------------------------------------------

  # CloudFront distibution
  ImageDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub Images for ${AWS::StackName}
        Aliases:
        - !Sub img.${GalleryAppDomain}
        ViewerCertificate:
          AcmCertificateArn: !Ref DomainCertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Origins:
          - Id: original-images-bucket
            DomainName: !GetAtt OriginalImagesBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OriginalImagesCloudFrontOriginAccessIdentity}
          - Id: derived-images-bucket
            DomainName: !GetAtt DerivedImagesBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${DerivedImagesCloudFrontOriginAccessIdentity}
          - Id: generate-derived-image-lambda
            DomainName: # parse DomainName from FunctionUrl which looks like 'https://12341232.lambda-url.on.aws/'
              !Select [
                2,
                !Split [
                  "/",
                  !Select [
                    1,
                    !Split [
                      ":",
                      !GetAtt GenerateDerivedImageFunctionUrl.FunctionUrl,
                    ],
                  ],
                ],
              ]
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        CacheBehaviors:
          - PathPattern: /i/*
            TargetOriginId: derived-images-group
            Compress: true
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: !Ref ImmutableCachePolicy
            ResponseHeadersPolicyId: !Ref ImmutableResponseHeadersPolicy
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            FunctionAssociations:
              - EventType: viewer-request
                FunctionARN: !GetAtt DerivedImagesUrlRewriteFunction.FunctionMetadata.FunctionARN
        DefaultCacheBehavior:
          TargetOriginId: original-images-bucket
          Compress: true
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized managed policy - use this if not using a custom ForwardedValues
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        OriginGroups:
          Quantity: 1
          Items:
            - Id: derived-images-group
              FailoverCriteria:
                StatusCodes:
                  Quantity: 2
                  Items: [403, 404] # S3 will return 403 instead of 404 when s3:ListBucket permission is not given
              Members:
                Quantity: 2
                Items:
                  - OriginId: derived-images-bucket
                  - OriginId: generate-derived-image-lambda

  # Set Cache-Control header to cache forever
  ImmutableResponseHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties: 
      ResponseHeadersPolicyConfig: 
        Name: !Sub ImmutableResponseHeadersPolicy-${AWS::StackName}
        Comment: !Sub Immutable response headers policy for ${AWS::StackName}
        CustomHeadersConfig:
          Items:
            - Header: Cache-Control
              Value: public, max-age=31536000, immutable
              Override: true

  # Caching policy to cache forever
  ImmutableCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: !Sub ImmutableCachePolicy-${AWS::StackName}
        Comment: Cache for a year
        DefaultTTL: 31536000 # 1 year
        MaxTTL: 31536000 # 1 year
        MinTTL: 31536000 # 1 year
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none

  # Allow CloudFront to read from the original images bucket
  OriginalImagesBucketCloudFrontReadPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref OriginalImagesBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${OriginalImagesBucket}/*
            Principal:
              CanonicalUser: !GetAtt OriginalImagesCloudFrontOriginAccessIdentity.S3CanonicalUserId

  # CloudFront identity of the original image bucket
  OriginalImagesCloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref OriginalImagesBucket

  # Allow CloudFront to read from the derived images bucket
  DerivedImagesBucketCloudFrontReadPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DerivedImagesBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${DerivedImagesBucket}/*
            Principal:
              CanonicalUser: !GetAtt DerivedImagesCloudFrontOriginAccessIdentity.S3CanonicalUserId

  # CloudFront identity of the derived image bucket
  DerivedImagesCloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref DerivedImagesBucket

  # CloudFront Function to rewrite URL to derived images bucket
  DerivedImagesUrlRewriteFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub RewriteDerivedImagesUrl-${AWS::StackName}
      AutoPublish: true
      FunctionConfig:
        Comment: !Sub Rewrite URL to derived images bucket for ${AWS::StackName}
        Runtime: cloudfront-js-2.0
      FunctionCode: |+2
        function handler(event) {
            const r = event.request;
            const v = r.querystring['version'], c = r.querystring['crop'], s = r.querystring['size'];
            if (!v) return { statusCode: 400, statusDescription: 'Missing Version' };
            if (!s) return { statusCode: 400, statusDescription: 'Missing Size' };
            r.uri += path(v) + path(s) + crop(c);
            r.querystring = {};
            return r;
        }
        function path(p) { return p ? '/' + p.value : ''; }
        function crop(p) { return p ? '/crop=' + p.value : ''; }

  # ---------------------------------------------------------------------------
  # Lambda to generate derived images
  # ---------------------------------------------------------------------------
  GenerateDerivedImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GenerateDerivedImage
      CodeUri: app/src/lambdas/generateDerivedImage/
      Handler: generateDerivedImageLambda.handler
      Description: Generates derived images
      Environment:
        Variables:
          ORIGINAL_IMAGES_BUCKET: !Ref OriginalImagesBucket
          DERIVED_IMAGES_BUCKET: !Ref DerivedImagesBucket
          JPEG_QUALITY: 85
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref OriginalImagesBucket
        - S3WritePolicy:
            BucketName: !Ref DerivedImagesBucket
      Layers:
        # ARN of the Lambda Layer containing the Sharp image processing library
        # I tried setting this as a parameter, but it didn't update when I changed it
        - arn:aws:lambda:us-east-1:010410881828:layer:Sharp-0_33_0:1 
      FunctionUrlConfig:
        AuthType: NONE #TODO: authentication
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Sourcemap: true
        Target: es2020
        EntryPoints:
          - generateDerivedImageLambda.ts
        External:
          - sharp

  # ---------------------------------------------------------------------------
  # API Gateway lambda to search for albums and images
  # ---------------------------------------------------------------------------
  SearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-Search
      CodeUri: app/src/lambdas/api/
      Handler: searchLambda.handler
      Description: Search for albums and images in DynamoDB
      Events:
        Api:
          Type: Api
          Properties:
            Path: /search/{searchTerms+}
            Method: GET
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
          REDIS_HOST: redis-13894.c321.us-east-1-2.ec2.cloud.redislabs.com:13894
          REDIS_USERNAME: prodsearcher
          REDIS_PASSWORD: "{{resolve:secretsmanager:Tacocat/Gallery/Authentication:SecretString:RedisSearchPassword}}"
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref GalleryItemDDBTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - searchLambda.ts

  # ---------------------------------------------------------------------------
  # API Gateway lambda to get latest album
  # ---------------------------------------------------------------------------
  GetLatestAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GetLatestAlbum
      CodeUri: app/src/lambdas/api/
      Handler: getLatestAlbumLambda.handler
      Description: Get latest album from DynamoDB
      Events:
        Api:
          Type: Api
          Properties:
            Path: /latest-album
            Method: GET
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref GalleryItemDDBTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - getLatestAlbumLambda.ts

  # ---------------------------------------------------------------------------
  # API Gateway lambda to determine whether album exists
  # ---------------------------------------------------------------------------
  AlbumExistsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-AlbumExists
      CodeUri: app/src/lambdas/api/
      Handler: albumExistsLambda.handler
      Description: Determine whether album exists
      Events:
        Api:
          Type: Api
          Properties:
            Path: /album/{albumPath+}
            Method: HEAD
        ApiRootEvent:
          Type: Api
          Properties:
            Path: /album # root album
            Method: HEAD
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref GalleryItemDDBTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - albumExistsLambda.ts

  # ---------------------------------------------------------------------------
  # API Gateway lambda to determine whether image exists
  # ---------------------------------------------------------------------------
  ImageExistsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ImageExists
      CodeUri: app/src/lambdas/api/
      Handler: imageExistsLambda.handler
      Description: Determine whether image exists
      Events:
        Api:
          Type: Api
          Properties:
            Path: /image/{imagePath+}
            Method: HEAD
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref GalleryItemDDBTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - imageExistsLambda.ts

  # ---------------------------------------------------------------------------
  # API Gateway lambda to retrieve album
  # ---------------------------------------------------------------------------
  GetAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GetAlbum
      CodeUri: app/src/lambdas/api/
      Handler: getAlbumLambda.handler
      Description: Get album and its children from DynamoDB
      Events:
        Api:
          Type: Api
          Properties:
            Path: /album/{albumPath+}
            Method: GET
        ApiRootEvent:
          Type: Api
          Properties:
            Path: /album # root album
            Method: GET
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref GalleryItemDDBTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - getAlbumLambda.ts

  # ---------------------------------------------------------------------------
  # API Gateway lambda to create new album
  # ---------------------------------------------------------------------------
  CreateAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateAlbum
      CodeUri: app/src/lambdas/api/
      Handler: createAlbumLambda.handler
      Description: Create new album in DynamoDB
      Events:
        Api:
          Type: Api
          Properties:
            Path: /album/{albumPath+}
            Method: PUT
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref GalleryItemDDBTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - createAlbumLambda.ts

  # ---------------------------------------------------------------------------
  # API Gateway lambda to update existing album
  # ---------------------------------------------------------------------------
  UpdateAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-UpdateAlbum
      CodeUri: app/src/lambdas/api/
      Handler: updateAlbumLambda.handler
      Description: Update existing album in DynamoDB
      Events:
        Api:
          Type: Api
          Properties:
            Path: /album/{albumPath+}
            Method: PATCH
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GalleryItemDDBTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:PartiQLUpdate
              Resource: !GetAtt GalleryItemDDBTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - updateAlbumLambda.ts

  # ---------------------------------------------------------------------------
  # API Gateway lambda to update existing image
  # ---------------------------------------------------------------------------
  UpdateImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-UpdateImage
      CodeUri: app/src/lambdas/api/
      Handler: updateImageLambda.handler
      Description: Update existing image in DynamoDB
      Events:
        Api:
          Type: Api
          Properties:
            Path: /image/{imagePath+}
            Method: PATCH
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref GalleryItemDDBTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:PartiQLUpdate
              Resource: !GetAtt GalleryItemDDBTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - updateImageLambda.ts

  # ---------------------------------------------------------------------------
  # API Gateway lambda to set album's thumbnail
  # ---------------------------------------------------------------------------
  SetAlbumThumbnailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SetAlbumThumbnail
      CodeUri: app/src/lambdas/api/
      Handler: setAlbumThumbnailLambda.handler
      Description: Set album thumbnail in DynamoDB
      Events:
        Api:
          Type: Api
          Properties:
            Path: /album-thumb/{albumPath+}
            Method: PATCH
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GalleryItemDDBTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - setAlbumThumbnailLambda.ts

  # ---------------------------------------------------------------------------
  # API Gateway lambda to recut a thumbnail
  # ---------------------------------------------------------------------------
  RecutThumbnailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-RecutThumbnail
      CodeUri: app/src/lambdas/api/
      Handler: recutThumbnailLambda.handler
      Description: Recut thumbnail in DynamoDB
      Events:
        Api:
          Type: Api
          Properties:
            Path: /thumb/{imagePath+}
            Method: PATCH
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GalleryItemDDBTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - recutThumbnailLambda.ts

  # ---------------------------------------------------------------------------
  # API Gateway lambda to rename an image
  # ---------------------------------------------------------------------------
  RenameImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-RenameImage
      CodeUri: app/src/lambdas/api/
      Handler: renameImageLambda.handler
      Description: Rename image in DynamoDB and S3
      Events:
        Api:
          Type: Api
          Properties:
            Path: /image-rename/{imagePath+}
            Method: POST
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
          ORIGINAL_IMAGES_BUCKET: !Ref OriginalImagesBucket
          DERIVED_IMAGES_BUCKET: !Ref DerivedImagesBucket
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref OriginalImagesBucket
        - S3CrudPolicy:
            BucketName: !Ref DerivedImagesBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref GalleryItemDDBTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:PartiQLUpdate
              Resource: !GetAtt GalleryItemDDBTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - renameImageLambda.ts

  # ---------------------------------------------------------------------------
  # API Gateway lambda to rename an album
  # ---------------------------------------------------------------------------
  RenameAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-RenameAlbum
      CodeUri: app/src/lambdas/api/
      Handler: renameAlbumLambda.handler
      Description: Rename album in DynamoDB and S3
      Events:
        Api:
          Type: Api
          Properties:
            Path: /album-rename/{albumPath+}
            Method: POST
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
          ORIGINAL_IMAGES_BUCKET: !Ref OriginalImagesBucket
          DERIVED_IMAGES_BUCKET: !Ref DerivedImagesBucket
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref OriginalImagesBucket
        - S3CrudPolicy:
            BucketName: !Ref DerivedImagesBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref GalleryItemDDBTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:PartiQLUpdate
              Resource: !GetAtt GalleryItemDDBTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - renameAlbumLambda.ts

  # ---------------------------------------------------------------------------
  # API Gateway lambda to delete album
  # ---------------------------------------------------------------------------
  DeleteAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DeleteAlbum
      CodeUri: app/src/lambdas/api/
      Handler: deleteAlbumLambda.handler
      Description: Delete album from DynamoDB
      Events:
        Api:
          Type: Api
          Properties:
            Path: /album/{albumPath+}
            Method: DELETE
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GalleryItemDDBTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:PartiQLSelect
              Resource: !GetAtt GalleryItemDDBTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - deleteAlbumLambda.ts

  # ---------------------------------------------------------------------------
  # API Gateway lambda to generate presigned URLs to upload images
  # ---------------------------------------------------------------------------
  GenerateUploadImageUrlsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GenerateUploadUrls
      CodeUri: app/src/lambdas/api/
      Handler: generateUploadUrlsLambda.handler
      Description: Generate presigned URLs to upload images
      Events:
        Api:
          Type: Api
          Properties:
            Path: /presigned/{albumPath+}
            Method: POST
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
          ORIGINAL_IMAGES_BUCKET: !Ref OriginalImagesBucket
      Policies:
        - S3WritePolicy: # needed to generate presigned URLs with the authority to upload images
            BucketName: !Ref OriginalImagesBucket
        - DynamoDBReadPolicy:
            TableName: !Ref GalleryItemDDBTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - generateUploadUrlsLambda.ts

  # ---------------------------------------------------------------------------
  # API Gateway lambda to delete image
  # ---------------------------------------------------------------------------
  DeleteImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DeleteImage
      CodeUri: app/src/lambdas/api/
      Handler: deleteImageLambda.handler
      Description: Delete image from DynamoDB and S3
      Events:
        Api:
          Type: Api
          Properties:
            Path: /image/{imagePath+}
            Method: DELETE
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
          ORIGINAL_IMAGES_BUCKET: !Ref OriginalImagesBucket
          DERIVED_IMAGES_BUCKET: !Ref DerivedImagesBucket
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref OriginalImagesBucket
        - S3CrudPolicy:
            BucketName: !Ref DerivedImagesBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref GalleryItemDDBTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:PartiQLUpdate
              Resource: !GetAtt GalleryItemDDBTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - deleteImageLambda.ts

  # ---------------------------------------------------------------------------
  # Lambda that processes uploaded image, extracts metadata and saves to DyanmoDB
  # ---------------------------------------------------------------------------
  ProcessImageUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ProcessImageUpload
      CodeUri: app/src/lambdas/processImageUpload/
      Handler: processImageUploadLambda.handler
      Description: Lambda that processes images uploaded to S3, extracts metadata and saves to DyanmoDB
      Policies:
        - S3ReadPolicy:
            BucketName: !Sub "${AWS::StackName}-original-images"
        - DynamoDBCrudPolicy:
            TableName: !Ref GalleryItemDDBTable
      Events:
        FileUploadEvent:
          Type: S3
          Properties:
            Bucket: !Ref OriginalImagesBucket
            Events:
              - s3:ObjectCreated:Put
              - s3:ObjectCreated:CompleteMultipartUpload
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - processImageUploadLambda.ts

# -----------------------------------------------------------------------------
# Outputs
# -----------------------------------------------------------------------------
Outputs:
  AwsApi:
    Description: AWS API URL (not used)
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Stage/

  Api:
      Description: API URL (use this)
      Value: !Sub "https://api.${GalleryAppDomain}"

  ImageDomain:
    Description: CloudFront image distribution
    Value: !Sub https://${ImageDistribution.DomainName}/

  GenerateDerivedImageUrl:
    Description: URL of lambda that generates derived images
    Value: !GetAtt GenerateDerivedImageFunctionUrl.FunctionUrl
