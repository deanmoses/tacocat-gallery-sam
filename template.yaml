# -----------------------------------------------------------------------------
# This is an AWS Serverless Application Model (SAM) template
# It defines the "stack" of AWS resources needed to run the SAM app
# -----------------------------------------------------------------------------
AWSTemplateFormatVersion: "2010-09-09"

# -----------------------------------------------------------------------------
# This file is written in SAM syntax, and gets transfomed and expanded into a
# CloudFormation template.  The CloudFormation template is what actually gets
# deployed.  The main point is that SAM syntax is much simpler, with a lot less
# boilerplate around declaring resources like Lambda functions and their
# accompanying execution roles.
# -----------------------------------------------------------------------------
Transform: AWS::Serverless-2016-10-31

# -----------------------------------------------------------------------------
# This particular template defines the back end of the Tacocat photo gallery
# -----------------------------------------------------------------------------
Description: Tacocat Gallery SAM App

# -----------------------------------------------------------------------------
# Parameters that can be specified when deploying this stack
# This is the only way to define constants for use elsewhere in the template
# -----------------------------------------------------------------------------
Parameters:
  CognitoUserPoolArn:
    Type: String
    Description: ARN of the Cognito User Pool for Tacocat Gallery Admins
    Default: arn:aws:cognito-idp:us-east-1:010410881828:userpool/us-east-1_DdPFtamLz

# -----------------------------------------------------------------------------
# Outputs for use after the stack is created, such as to:
#  - Import into other stacks (to create cross-stack references)
#  - View value on the AWS CloudFormation console
# -----------------------------------------------------------------------------
Outputs:
  ImageApi:
    Description: API Gateway endpoint URL for Prod stage for Image API
    Value: !Sub "https://${ImageApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  GalleryItemDDBTable:
    Description: DynamoDB table containing gallery album and image metadata
    Value: !Ref GalleryItemDDBTable

# -----------------------------------------------------------------------------
# Configuration properties inherited by all resources, such as Lambda functions
# -----------------------------------------------------------------------------
Globals:
  Function:
    Runtime: nodejs18.x
    MemorySize: 256
    Timeout: 100
    Handler: index.handler

# -----------------------------------------------------------------------------
# Resources are the actual assets that will be provisioned on AWS
# -----------------------------------------------------------------------------
Resources:
  # ---------------------------------------------------------------------------
  # Lambda function that retrieves an album and its children from DynamoDB
  # ---------------------------------------------------------------------------
  GetAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/src/api/lambda_functions/get_album/
      Description: API Gateway function that returns an album and its children from DynamoDB
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /album/{albumPath+}
            Method: GET
            RestApiId: !Ref ImageApi
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref GalleryItemDDBTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts

  # ---------------------------------------------------------------------------
  # Lambda function that creates an album and its children from DynamoDB
  # ---------------------------------------------------------------------------
  CreateAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/src/api/lambda_functions/create_album/
      Description: API Gateway function that creates an album in DynamoDB
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /album/{albumPath+}
            Method: PUT
            RestApiId: !Ref ImageApi
            Auth:
              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref GalleryItemDDBTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts

  # ---------------------------------------------------------------------------
  # API Gateway Image API
  # ---------------------------------------------------------------------------
  ImageApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: Tacocat Gallery Image API
      StageName: Prod
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Ref CognitoUserPoolArn

  # ---------------------------------------------------------------------------
  # Step Functions state machine that processes images
  # ---------------------------------------------------------------------------
  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      # State machine files MUST live at the root of the project.
      #
      # sam build has weird behavior: when transforming to a CloudFormation template,
      # it ignores any path given to DefinitionUri and instead transforms to:
      # ../../the_name_of_the_template.asl.yaml.
      # You can see this in transformed template at .aws-sam/build/template.yaml
      # That ../../ resolves to the root of the project, so that's the only place
      # you can stick state machine files.
      #
      # This will probably break when we do a build via a CI/CD process where the
      # build directory isn't within the root of the project.
      DefinitionUri: state_machine.asl.yaml
      # We want the Express workload type
      # Express is for event processing workloads and can run for up to 5 minutes
      # Standard is for long-running (up to one year)
      Type: EXPRESS
      #DefinitionSubstitutions:
      #  HelloWorldFunctionArn: !GetAtt HelloWorldFunction.Arn
      Policies:
        #  - LambdaInvokePolicy:
        #      FunctionName: !Ref HelloWorldFunction
        - CloudWatchLogsFullAccess
      Logging:
        Level: ALL
        IncludeExecutionData: FALSE
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StateMachineLogGroup.Arn

  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: StateMachineLogGroup

  # -----------------------------------------------------------------------------
  # DynamoDB table containing the album and image metadata
  # -----------------------------------------------------------------------------
  GalleryItemDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: parentPath
          AttributeType: S
        - AttributeName: itemName
          AttributeType: S
      KeySchema:
        - AttributeName: parentPath
          KeyType: HASH
        - AttributeName: itemName
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 3
        WriteCapacityUnits: 3
      #StreamSpecification: # enable streaming so that the SearchIndexerFunction lambda can send the stream to be indexed by search engine
      #StreamViewType: "NEW_IMAGE"
