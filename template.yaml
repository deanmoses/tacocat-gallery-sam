# -----------------------------------------------------------------------------
# This is an AWS Serverless Application Model (SAM) template
# It defines the "stack" of AWS resources needed to run the SAM app
# -----------------------------------------------------------------------------
AWSTemplateFormatVersion: "2010-09-09"

# -----------------------------------------------------------------------------
# This file is written in SAM syntax, and gets transfomed and expanded into a
# CloudFormation template.  The CloudFormation template is what actually gets
# deployed.  The main point is that SAM syntax is much simpler, with a lot less
# boilerplate around declaring resources like Lambda functions and their
# accompanying execution roles.
# -----------------------------------------------------------------------------
Transform: AWS::Serverless-2016-10-31

# -----------------------------------------------------------------------------
# This particular template defines the back end of the Tacocat photo gallery
# -----------------------------------------------------------------------------
Description: Tacocat Gallery SAM App

# -----------------------------------------------------------------------------
# Parameters that can be specified when deploying this stack
# This is the only way to define constants for use elsewhere in the template
# -----------------------------------------------------------------------------
Parameters:
  CognitoUserPoolArn:
    Type: String
    Description: ARN of the Cognito User Pool for Tacocat Gallery Admins
    Default: arn:aws:cognito-idp:us-east-1:010410881828:userpool/us-east-1_DdPFtamLz
  SharpLayerArn:
    Type: String
    Description: ARN of the Lambda Layer containing the Sharp image processing library
    Default: arn:aws:lambda:us-east-1:010410881828:layer:Sharp-0_31_2:1

# -----------------------------------------------------------------------------
# Configuration properties inherited by all resources, such as Lambda functions
# -----------------------------------------------------------------------------
Globals:
  Function:
    Runtime: nodejs18.x
    MemorySize: 256
    Timeout: 100

# -----------------------------------------------------------------------------
# Resources are the actual assets that will be provisioned on AWS
# -----------------------------------------------------------------------------
Resources:
  # -----------------------------------------------------------------------------
  # S3 bucket for original images
  # -----------------------------------------------------------------------------
  OriginalImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-original-images"

  # -----------------------------------------------------------------------------
  # S3 bucket for derived images
  # -----------------------------------------------------------------------------
  DerivedImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-derived-images"
      # Autodelete derived images after a while
      # If someone asks for them again they'll be regenerated
      LifecycleConfiguration:
        Rules:
          - Id: Housekeeping
            Status: Enabled
            ExpirationInDays: 60 # delete files after 60 days

  # -----------------------------------------------------------------------------
  # DynamoDB table containing the album and image metadata
  # -----------------------------------------------------------------------------
  GalleryItemDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: parentPath
          AttributeType: S
        - AttributeName: itemName
          AttributeType: S
      KeySchema:
        - AttributeName: parentPath
          KeyType: HASH
        - AttributeName: itemName
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 3
        WriteCapacityUnits: 3

  # -----------------------------------------------------------------------------
  # CloudFront CDN distribution that serves the images
  # -----------------------------------------------------------------------------

  # CloudFront distibution
  ImageDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub Distributes the images for ${AWS::StackName}
        Enabled: true
        # Aliases: # Custom domain
        #   - YOUR CNAME HERE # For tacocat.com, must be configured in DreamHost
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        Origins:
          - Id: original-images-bucket
            DomainName: !GetAtt OriginalImagesBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${OriginalImagesCloudFrontOriginAccessIdentity}"
          - Id: derived-images-bucket
            DomainName: !GetAtt DerivedImagesBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${DerivedImagesCloudFrontOriginAccessIdentity}"
          - Id: generate-derived-image-lambda
            DomainName: # parse DomainName from FunctionUrl which looks like 'https://12341232.lambda-url.on.aws/'
              !Select [
                2,
                !Split [
                  "/",
                  !Select [
                    1,
                    !Split [
                      ":",
                      !GetAtt GenerateDerivedImageFunctionUrl.FunctionUrl,
                    ],
                  ],
                ],
              ]
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        CacheBehaviors:
          - PathPattern: /i/*
            TargetOriginId: derived-images-group
            Compress: true
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized managed policy - use this if not using a custom ForwardedValues
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
        DefaultCacheBehavior:
          TargetOriginId: original-images-bucket
          Compress: true
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized managed policy - use this if not using a custom ForwardedValues
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        OriginGroups:
          Quantity: 1
          Items:
            - Id: derived-images-group
              FailoverCriteria:
                StatusCodes:
                  Quantity: 2
                  Items: [403, 404] # S3 will return 403 instead of 404 when s3:ListBucket permission is not given
              Members:
                Quantity: 2
                Items:
                  - OriginId: derived-images-bucket
                  - OriginId: generate-derived-image-lambda

  # Allow CloudFront to read from the original images bucket
  OriginalImagesBucketCloudFrontReadPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref OriginalImagesBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${OriginalImagesBucket}/*
            Principal:
              CanonicalUser: !GetAtt OriginalImagesCloudFrontOriginAccessIdentity.S3CanonicalUserId

  # CloudFront identity of the original image bucket
  OriginalImagesCloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref OriginalImagesBucket

  # Allow CloudFront to read from the derived images bucket
  DerivedImagesBucketCloudFrontReadPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DerivedImagesBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${DerivedImagesBucket}/*
            Principal:
              CanonicalUser: !GetAtt DerivedImagesCloudFrontOriginAccessIdentity.S3CanonicalUserId

  # CloudFront identity of the derived image bucket
  DerivedImagesCloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref DerivedImagesBucket

  # ---------------------------------------------------------------------------
  # Lambda to generate derived images
  # ---------------------------------------------------------------------------
  GenerateDerivedImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GenerateDerivedImage
      CodeUri: app/src/lambdas/generateDerivedImage/
      Handler: generateDerivedImageLambda.handler
      Environment:
        Variables:
          ORIGINAL_IMAGES_BUCKET: !Ref OriginalImagesBucket
          DERIVED_IMAGES_BUCKET: !Ref DerivedImagesBucket
          ORIGINAL_IMAGE_KEY: ${ID}
          IMAGE_PATH_ID_PATTERN: ^/i/(?<ID>\d\d\d\d\/(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])\/[a-zA-Z0-9_-]+\.(jpg|jpeg|gif|png))
          IMAGE_QUALITY: "80"
          CACHE_CONTROL: "public, max-age=31536000"
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref OriginalImagesBucket
        - S3WritePolicy:
            BucketName: !Ref DerivedImagesBucket
      Layers:
        - !Ref SharpLayerArn
      FunctionUrlConfig:
        AuthType: NONE #TODO: authentication
        InvokeMode: RESPONSE_STREAM
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Sourcemap: true
        Target: "es2020"
        EntryPoints:
          - generateDerivedImageLambda.ts
        External:
          - sharp

  # ---------------------------------------------------------------------------
  # API Gateway lambda to get latest album
  # ---------------------------------------------------------------------------
  GetLatestAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/src/lambdas/api/
      Handler: getLatestAlbumLambda.handler
      Description: API Gateway lambda function that gets the latest album from DynamoDB
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /latest-album
            Method: GET
            RestApiId: !Ref ImageApi
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref GalleryItemDDBTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - getLatestAlbumLambda.ts

  # ---------------------------------------------------------------------------
  # API Gateway lambda to retrieve album
  # ---------------------------------------------------------------------------
  GetAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/src/lambdas/api/
      Handler: getAlbumLambda.handler
      Description: API Gateway function that returns an album and its children from DynamoDB
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /album/{albumPath+}
            Method: GET
            RestApiId: !Ref ImageApi
        ApiRootEvent:
          Type: Api
          Properties:
            Path: /album # root album
            Method: GET
            RestApiId: !Ref ImageApi
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref GalleryItemDDBTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - getAlbumLambda.ts

  # ---------------------------------------------------------------------------
  # API Gateway lambda to create new album
  # ---------------------------------------------------------------------------
  CreateAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/src/lambdas/api/
      Handler: createAlbumLambda.handler
      Description: API Gateway function that creates a new album in DynamoDB
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /album/{albumPath+}
            Method: PUT
            RestApiId: !Ref ImageApi
      #           Auth:
      #             Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref GalleryItemDDBTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - createAlbumLambda.ts

  # ---------------------------------------------------------------------------
  # API Gateway lambda to update existing album
  # ---------------------------------------------------------------------------
  UpdateAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/src/lambdas/api/
      Handler: updateAlbumLambda.handler
      Description: API Gateway function that updates an existing album in DynamoDB
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /album/{albumPath+}
            Method: PATCH
            RestApiId: !Ref ImageApi
      #           Auth:
      #             Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GalleryItemDDBTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:PartiQLUpdate
              Resource: !GetAtt GalleryItemDDBTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - updateAlbumLambda.ts

  # ---------------------------------------------------------------------------
  # API Gateway lambda to update existing image
  # ---------------------------------------------------------------------------
  UpdateImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/src/lambdas/api/
      Handler: updateImageLambda.handler
      Description: API Gateway function that updates an existing image in DynamoDB
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /image/{imagePath+}
            Method: PATCH
            RestApiId: !Ref ImageApi
      #            Auth:
      #              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref GalleryItemDDBTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:PartiQLUpdate
              Resource: !GetAtt GalleryItemDDBTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - updateImageLambda.ts

  # ---------------------------------------------------------------------------
  # API Gateway lambda to set album's thumbnail
  # ---------------------------------------------------------------------------
  SetAlbumThumbnailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/src/lambdas/api/
      Handler: setAlbumThumbnailLambda.handler
      Description: API Gateway function that sets an album's thumbnail in DynamoDB
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /album-thumb/{albumPath+}
            Method: PATCH
            RestApiId: !Ref ImageApi
      #            Auth:
      #              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GalleryItemDDBTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - setAlbumThumbnailLambda.ts

  # ---------------------------------------------------------------------------
  # API Gateway lambda to recut a thumbnail
  # ---------------------------------------------------------------------------
  RecutThumbnailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/src/lambdas/api/
      Handler: recutThumbnailLambda.handler
      Description: API Gateway function recuts an album's thumbnail in DynamoDB
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /thumb/{imagePath+}
            Method: PATCH
            RestApiId: !Ref ImageApi
      #            Auth:
      #              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref GalleryItemDDBTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - recutThumbnailLambda.ts

  # ---------------------------------------------------------------------------
  # API Gateway lambda to delete album
  # ---------------------------------------------------------------------------
  DeleteAlbumFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/src/lambdas/api/
      Handler: deleteAlbumLambda.handler
      Description: API Gateway function that deletes an album from DynamoDB
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /album/{albumPath+}
            Method: DELETE
            RestApiId: !Ref ImageApi
      #            Auth:
      #              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GalleryItemDDBTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - deleteAlbumLambda.ts

  # ---------------------------------------------------------------------------
  # API Gateway lambda to delete image
  # ---------------------------------------------------------------------------
  DeleteImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/src/lambdas/api/
      Handler: deleteImageLambda.handler
      Description: API Gateway function that deletes an image from DynamoDB and S3
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /image/{imagePath+}
            Method: DELETE
            RestApiId: !Ref ImageApi
      #            Auth:
      #              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
          ORIGINAL_IMAGES_BUCKET: !Ref OriginalImagesBucket
          DERIVED_IMAGES_BUCKET: !Ref DerivedImagesBucket
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref OriginalImagesBucket
        - S3CrudPolicy:
            BucketName: !Ref DerivedImagesBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref GalleryItemDDBTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:PartiQLUpdate
              Resource: !GetAtt GalleryItemDDBTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - deleteImageLambda.ts

  # ---------------------------------------------------------------------------
  # API Gateway Image API
  # ---------------------------------------------------------------------------
  ImageApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: Tacocat Gallery Image API
      StageName: Prod
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Ref CognitoUserPoolArn

  # ---------------------------------------------------------------------------
  # Lambda that processes uploaded image, extracts metadata and saves to DyanmoDB
  # ---------------------------------------------------------------------------
  ProcessImageUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/src/lambdas/processImageUpload/
      Handler: processImageUploadLambda.handler
      Description: Lambda that processes images uploaded to S3, extracts metadata and saves to DyanmoDB
      Policies:
        - S3ReadPolicy:
            BucketName: !Sub "${AWS::StackName}-original-images"
        - DynamoDBCrudPolicy:
            TableName: !Ref GalleryItemDDBTable
      Events:
        FileUploadEvent:
          Type: S3
          Properties:
            Bucket: !Ref OriginalImagesBucket
            Events:
              - "s3:ObjectCreated:*"
      Environment:
        Variables:
          GALLERY_ITEM_DDB_TABLE: !Ref GalleryItemDDBTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - processImageUploadLambda.ts

# -----------------------------------------------------------------------------
# Outputs
# -----------------------------------------------------------------------------
Outputs:
  ImageApi:
    Description: URL of Image API - Prod stage
    Value: !Sub https://${ImageApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/

  ImageDomain:
    Description: URL of CloudFront CDN image distribution
    Value: !Sub https://${ImageDistribution.DomainName}/

  GenerateDerivedImageUrl:
    Description: URL of lambda that generates derived images
    Value: !GetAtt GenerateDerivedImageFunctionUrl.FunctionUrl
