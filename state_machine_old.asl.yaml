Comment: Image Processing Workflow
StartAt: ChooseAction
States:
  ChooseAction:
    Type: Choice
    Choices:
      - And:
          - Variable: $.isAlbum
            BooleanEquals: true
          - Variable: $.action
            StringEquals: create
        Next: StoreAlbum
      - And:
          - Variable: $.isAlbum
            BooleanEquals: true
          - Variable: $.action
            StringEquals: delete
        Next: DeleteAlbum
      - And:
          - Variable: $.isAlbum
            BooleanEquals: false
          - Variable: $.action
            StringEquals: create
        Next: ExtractImageMetadata
      - And:
          - Variable: $.isAlbum
            BooleanEquals: false
          - Variable: $.action
            StringEquals: delete
        Next: ParallelProcessDeleteImage
  ExtractImageMetadata:
    Type: Task
    Resource: ${ExtractImageMetadataLambdaArn}
    InputPath: $
    ResultPath: $.extractedMetadata
    Next: ImageTypeCheck
    Catch:
      - ErrorEquals:
          - ImageIdentifyError
        Next: NotSupportedImageType
    Retry:
      - ErrorEquals:
          - ImageIdentifyError
        MaxAttempts: 0
      - ErrorEquals:
          - States.ALL
        IntervalSeconds: 1
        MaxAttempts: 2
        BackoffRate: 1.5
  ImageTypeCheck:
    Type: Choice
    Choices:
      - Or:
          - Variable: $.extractedMetadata.format
            StringEquals: JPEG
          - Variable: $.extractedMetadata.format
            StringEquals: PNG
        Next: TransformImageMetadata
    Default: NotSupportedImageType
  TransformImageMetadata:
    Type: Task
    Resource: ${TransformImageMetadataLambdaArn}
    InputPath: $.extractedMetadata
    ResultPath: $.extractedMetadata
    Retry:
      - ErrorEquals:
          - States.ALL
        IntervalSeconds: 1
        MaxAttempts: 2
        BackoffRate: 1.5
    Next: ParallelProcessNewImage
  NotSupportedImageType:
    Type: Fail
    Cause: Image type not supported!
    Error: FileTypeNotSupported
  ParallelProcessNewImage:
    Type: Parallel
    Branches:
      - StartAt: CutLargeImage
        States:
          CutLargeImage:
            Type: Task
            Resource: ${GenerateLargeImageLambdaArn}
            Retry:
              - ErrorEquals:
                  - States.ALL
                IntervalSeconds: 1
                MaxAttempts: 2
                BackoffRate: 1.5
            End: true
      - StartAt: Thumbnail
        States:
          Thumbnail:
            Type: Task
            Resource: ${GenerateThumbnailImageLambdaArn}
            Retry:
              - ErrorEquals:
                  - States.ALL
                IntervalSeconds: 1
                MaxAttempts: 2
                BackoffRate: 1.5
            End: true
    ResultPath: $.parallelNewImageResults
    Next: StoreImage
  StoreImage:
    Type: Task
    Resource: ${StoreImageLambdaArn}
    InputPath: $
    ResultPath: $.storeImageResult
    Retry:
      - ErrorEquals:
          - States.ALL
        IntervalSeconds: 1
        MaxAttempts: 2
        BackoffRate: 1.5
    End: true
  ParallelProcessDeleteImage:
    Type: Parallel
    Branches:
      - StartAt: DeleteImageFromDynamo
        States:
          DeleteImageFromDynamo:
            Type: Task
            Resource: ${DeleteImageFromDynamoLambdaArn}
            InputPath: $
            ResultPath: $.deleteImageFromDynamoResult
            Retry:
              - ErrorEquals:
                  - States.ALL
                IntervalSeconds: 1
                MaxAttempts: 2
                BackoffRate: 1.5
            Next: WasDeletedImageAnAlbumThumb
          WasDeletedImageAnAlbumThumb:
            Type: Choice
            InputPath: $.deleteImageFromDynamoResult
            Choices:
              - Variable: $.albumCount
                NumericGreaterThan: 0
                Next: ChooseNewThumbForAlbums
            Default: SuccessState
          ChooseNewThumbForAlbums:
            Type: Task
            Resource: ${ChooseAlbumThumbLambdaArn}
            InputPath: $
            ResultPath: $.chooseAlbumThumb
            OutputPath: $.chooseAlbumThumb
            Retry:
              - ErrorEquals:
                  - States.ALL
                IntervalSeconds: 1
                MaxAttempts: 4
                BackoffRate: 1.5
            End: true
          SuccessState:
            Type: Succeed
      - StartAt: DeleteResizedImagesFromS3
        States:
          DeleteResizedImagesFromS3:
            Type: Task
            Resource: ${DeleteResizedImagesFromS3LambdaArn}
            InputPath: $
            ResultPath: $.deleteResizedImagesFromS3Result
            Retry:
              - ErrorEquals:
                  - States.ALL
                IntervalSeconds: 1
                MaxAttempts: 2
                BackoffRate: 1.5
            End: true
    ResultPath: $.parallelDeleteImageResults
    End: true
  StoreAlbum:
    Type: Task
    Resource: ${StoreAlbumLambdaArn}
    InputPath: $
    ResultPath: $.storeAlbumResult
    Retry:
      - ErrorEquals:
          - States.ALL
        IntervalSeconds: 1
        MaxAttempts: 2
        BackoffRate: 1.5
    End: true
  DeleteAlbum:
    Type: Task
    Resource: ${DeleteAlbumFromDynamoLambdaArn}
    InputPath: $
    ResultPath: $.deleteAlbumFromDynamoResult
    Retry:
      - ErrorEquals:
          - States.ALL
        IntervalSeconds: 1
        MaxAttempts: 2
        BackoffRate: 1.5
    End: true